// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"mickaelalliel.com/telebot/parser/internal/ent/expense"
	"mickaelalliel.com/telebot/parser/internal/ent/predicate"
)

// ExpenseUpdate is the builder for updating Expense entities.
type ExpenseUpdate struct {
	config
	hooks    []Hook
	mutation *ExpenseMutation
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (eu *ExpenseUpdate) Where(ps ...predicate.Expense) *ExpenseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetAmount sets the "amount" field.
func (eu *ExpenseUpdate) SetAmount(f float64) *ExpenseUpdate {
	eu.mutation.ResetAmount()
	eu.mutation.SetAmount(f)
	return eu
}

// AddAmount adds f to the "amount" field.
func (eu *ExpenseUpdate) AddAmount(f float64) *ExpenseUpdate {
	eu.mutation.AddAmount(f)
	return eu
}

// SetCategory sets the "category" field.
func (eu *ExpenseUpdate) SetCategory(s string) *ExpenseUpdate {
	eu.mutation.SetCategory(s)
	return eu
}

// SetMethod sets the "method" field.
func (eu *ExpenseUpdate) SetMethod(s string) *ExpenseUpdate {
	eu.mutation.SetMethod(s)
	return eu
}

// SetOwnerName sets the "ownerName" field.
func (eu *ExpenseUpdate) SetOwnerName(s string) *ExpenseUpdate {
	eu.mutation.SetOwnerName(s)
	return eu
}

// SetTimestamp sets the "timestamp" field.
func (eu *ExpenseUpdate) SetTimestamp(t time.Time) *ExpenseUpdate {
	eu.mutation.SetTimestamp(t)
	return eu
}

// Mutation returns the ExpenseMutation object of the builder.
func (eu *ExpenseUpdate) Mutation() *ExpenseMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExpenseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExpenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExpenseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExpenseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExpenseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExpenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   expense.Table,
			Columns: expense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: expense.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: expense.FieldAmount,
		})
	}
	if value, ok := eu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: expense.FieldAmount,
		})
	}
	if value, ok := eu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expense.FieldCategory,
		})
	}
	if value, ok := eu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expense.FieldMethod,
		})
	}
	if value, ok := eu.mutation.OwnerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expense.FieldOwnerName,
		})
	}
	if value, ok := eu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: expense.FieldTimestamp,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ExpenseUpdateOne is the builder for updating a single Expense entity.
type ExpenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExpenseMutation
}

// SetAmount sets the "amount" field.
func (euo *ExpenseUpdateOne) SetAmount(f float64) *ExpenseUpdateOne {
	euo.mutation.ResetAmount()
	euo.mutation.SetAmount(f)
	return euo
}

// AddAmount adds f to the "amount" field.
func (euo *ExpenseUpdateOne) AddAmount(f float64) *ExpenseUpdateOne {
	euo.mutation.AddAmount(f)
	return euo
}

// SetCategory sets the "category" field.
func (euo *ExpenseUpdateOne) SetCategory(s string) *ExpenseUpdateOne {
	euo.mutation.SetCategory(s)
	return euo
}

// SetMethod sets the "method" field.
func (euo *ExpenseUpdateOne) SetMethod(s string) *ExpenseUpdateOne {
	euo.mutation.SetMethod(s)
	return euo
}

// SetOwnerName sets the "ownerName" field.
func (euo *ExpenseUpdateOne) SetOwnerName(s string) *ExpenseUpdateOne {
	euo.mutation.SetOwnerName(s)
	return euo
}

// SetTimestamp sets the "timestamp" field.
func (euo *ExpenseUpdateOne) SetTimestamp(t time.Time) *ExpenseUpdateOne {
	euo.mutation.SetTimestamp(t)
	return euo
}

// Mutation returns the ExpenseMutation object of the builder.
func (euo *ExpenseUpdateOne) Mutation() *ExpenseMutation {
	return euo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExpenseUpdateOne) Select(field string, fields ...string) *ExpenseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Expense entity.
func (euo *ExpenseUpdateOne) Save(ctx context.Context) (*Expense, error) {
	var (
		err  error
		node *Expense
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExpenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExpenseUpdateOne) SaveX(ctx context.Context) *Expense {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExpenseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExpenseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExpenseUpdateOne) sqlSave(ctx context.Context) (_node *Expense, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   expense.Table,
			Columns: expense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: expense.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Expense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expense.FieldID)
		for _, f := range fields {
			if !expense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != expense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: expense.FieldAmount,
		})
	}
	if value, ok := euo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: expense.FieldAmount,
		})
	}
	if value, ok := euo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expense.FieldCategory,
		})
	}
	if value, ok := euo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expense.FieldMethod,
		})
	}
	if value, ok := euo.mutation.OwnerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: expense.FieldOwnerName,
		})
	}
	if value, ok := euo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: expense.FieldTimestamp,
		})
	}
	_node = &Expense{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
